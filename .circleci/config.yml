# Orb 'circleci/windows@2.3.0' resolved to 'circleci/windows@2.3.0'
# Orb 'circleci/slack@3.4.2' resolved to 'circleci/slack@3.4.2'
# Orb 'circleci/gcp-gke@1.0.4' resolved to 'circleci/gcp-gke@1.0.4'
# Orb 'circleci/kubernetes@0.11.0' resolved to 'circleci/kubernetes@0.11.0'
# Orb 'circleci/helm@1.0.0' resolved to 'circleci/helm@1.0.0'
version: 2
jobs:
  test-e2e-gke-single-gpu-2:
    docker:
    - image: determinedai/cimg-base:stable
    parallelism: 1
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: echo "export CLUSTER_ID=\"e2e-gpu-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}\"" >> $BASH_ENV
    - run:
        command: |
          install () {
            # Set sudo to work whether logged in as root user or non-root user
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            cd ~/
            curl -s https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-268.0.0-linux-x86_64.tar.gz | tar xz
            echo 'source ~/google-cloud-sdk/path.bash.inc' >> $BASH_ENV
          }

          if grep 'docker\|lxc' /proc/1/cgroup > /dev/null 2>&1; then
            if [[ $(command -v gcloud) == "" ]]; then
              install
            else
              echo "gcloud CLI is already installed."
            fi
          else
            echo "----------------------------------------------------------------------------------------------------"
            echo "this is a machine executor job, replacing default installation of gcloud CLI"
            echo "----------------------------------------------------------------------------------------------------"
            sudo rm -rf /opt/google-cloud-sdk
            install
          fi
        name: Install latest gcloud CLI version, if not available
    - run:
        command: gcloud version
        name: GCloud version
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
        name: Install kubectl
    - run:
        command: |
          IFS="," read -ra PARAMS <<< "GCLOUD_SERVICE_KEY,GOOGLE_PROJECT_ID,GOOGLE_COMPUTE_ZONE"

          for i in "${PARAMS[@]}"; do
            if [[ -z "${i}" ]]; then
              echo "ERROR: Missing environment variable {i}" >&2

              if [[ -n "" ]]; then
                echo "" >&2
              fi

              exit 1
            else
              echo "Yes, ${i} is defined!"
            fi
          done
        name: Checking whether required env vars are set to initialize gcloud CLI...
    - run:
        command: |
          # Store service account
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

          # Initialize gcloud CLI
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
          gcloud --quiet config set project $GOOGLE_PROJECT_ID
          gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
        name: Initialize gcloud CLI to connect to Google Cloud
    - run:
        command: |+
          gcloud container clusters create ${CLUSTER_ID} --cluster-version=1.16.13-gke.1 \
          --machine-type=n1-standard-8 \
          --num-nodes=1 \
          --accelerator type=nvidia-tesla-k80,count=1 \
          --region=us-west1 \
          --node-locations=us-west1-b \
          --scopes=storage-rw \
          --image-type=UBUNTU

        name: Create GKE cluster
        no_output_timeout: 10m
    - run:
        command: |+
          RESOURCE_FILE_PATH=".circleci/scripts/gpu-daemonset.yaml"
          ACTION_TYPE="apply"
          NAMESPACE=""
          DRY_RUN="false"
          KUSTOMIZE="false"
          if [ -n "${ACTION_TYPE}" ]; then
            set -- "$@" "${ACTION_TYPE}"
          fi
          if [ -n "${RESOURCE_FILE_PATH}" ]; then
            if [ "${KUSTOMIZE}" == "true" ]; then
              set -- "$@" -k
            else
              set -- "$@" -f
            fi
            set -- "$@" "${RESOURCE_FILE_PATH}"
          fi
          if [ -n "${NAMESPACE}" ]; then
              set -- "$@" --namespace="${NAMESPACE}"
          fi
          if [ "${DRY_RUN}" == "true" ]; then
            set -- "$@" --dry-run
          fi

          kubectl "$@"

        name: Create/update the k8s resource
    - run:
        command: |
          if which helm > /dev/null; then
            echo "helm is already installed"
            exit 0
          fi
          VERSION="v3.2.4"
          IS_VERSION_2="true"
          if [ -n "${VERSION}" ]; then
            set -- "$@" --version "${VERSION}"
            if [ "${VERSION}" == "${VERSION#v2.}" ]; then
              IS_VERSION_2="false"
            fi
          fi
          INSTALL_SCRIPT="https://raw.githubusercontent.com/helm/helm/master/scripts/get"
          curl "${INSTALL_SCRIPT}" > get_helm.sh
          chmod 700 get_helm.sh
          ./get_helm.sh "$@"
          if [ "${IS_VERSION_2}" == "true" ]; then
            helm init --client-only
          else
            helm repo add stable https://kubernetes-charts.storage.googleapis.com
          fi
        name: Install and init the helm client (if necessary)
    - run:
        command: |
          helm repo update
        name: Update repositories
    - run:
        command: |
          RELEASE_NAME="ci"
          VALUES_TO_OVERRIDE="detVersion=${CIRCLE_SHA1},\
          maxSlotsPerPod=1,\
          checkpointStorage.type=gcs,\
          checkpointStorage.bucket=det-ci
          "
          NAMESPACE="default"
          TLS="false"
          TLS_CA_CERT=""
          TLS_CERT=""
          TLS_HOSTNAME=""
          TLS_KEY=""
          TLS_VERIFY="false"
          TILLER_NAMESPACE=""
          WAIT="true"
          if [ -n "${VALUES_TO_OVERRIDE}" ]; then
            set -- "$@" --set "${VALUES_TO_OVERRIDE}"
          fi
          if [ -n "${NAMESPACE}" ]; then
            set -- "$@" --namespace="${NAMESPACE}"
          fi
          if [ "${TLS}" == "true" ]; then
            set -- "$@" --tls
          fi
          if [ -n "${TLS_CA_CERT}" ]; then
            set -- "$@" --tls-ca-cert="${TLS_CA_CERT}"
          fi
          if [ -n "${TLS_CERT}" ]; then
            set -- "$@" --tls-cert="${TLS_CERT}"
          fi
          if [ -n "${TLS_HOSTNAME}" ]; then
            set -- "$@" --tls-hostname="${TLS_HOSTNAME}"
          fi
          if [ -n "${TLS_KEY}" ]; then
            set -- "$@" --tls-key="${TLS_KEY}"
          fi
          if [ "${TLS_VERIFY}" == "true" ]; then
            set -- "$@" --tls-verify
          fi
          if [ -n "${TILLER_NAMESPACE}" ]; then
            set -- "$@" --tiller-namespace "${TILLER_NAMESPACE}"
          fi
          if [ "${WAIT}" == "true" ]; then
            set -- "$@" --wait
          fi

          VERSION_2_MATCH="$(helm version --short -c | grep 'Client: v2' || true)"
          if [ -n "${VERSION_2_MATCH}" ]; then
            if [ -n "${RELEASE_NAME}" ]; then
              set -- "$@" --name "${RELEASE_NAME}"
            fi
            helm install helm/charts/determined "$@"
          else
            if [ -n "${RELEASE_NAME}" ]; then
              helm install "${RELEASE_NAME}" helm/charts/determined "$@"
            else
              set -- "$@" --generate-name
              helm install helm/charts/determined "$@"
            fi
          fi
        name: Install chart
        no_output_timeout: 30m
    - run:
        name: Set Master Address
        command: |
          MASTER_HOST=$(kubectl get -n default  service determined-master-service-ci \
          --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "export MASTER_HOST=\"${MASTER_HOST}\"" >> $BASH_ENV
          echo "${MASTER_HOST}"
    - run:
        name: Set Google Application Credentials
        command: |
          GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
          echo "export GOOGLE_APPLICATION_CREDENTIALS=\"${GOOGLE_APPLICATION_CREDENTIALS}\"" >> $BASH_ENV
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m e2e_gpu \
          --durations=0 \
          --master-host="${MASTER_HOST}" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - run:
        name: Terminate GKE Cluster
        when: always
        command: |
          gcloud container clusters delete ${CLUSTER_ID} --quiet --region=us-west1
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< "master"

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "xmaster" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "${SLACK_USER_ID}" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "${SLACK_USER_ID}"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`e2e_gpu\` E2E GKE GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`e2e_gpu\` E2E GKE GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  test-e2e-gpu-nightly:
    docker:
    - image: determinedai/cimg-base:stable
    parallelism: 1
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: echo "export CLUSTER_ID=\"nightly-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}\"" >> $BASH_ENV
    - run:
        name: Deploy AWS cluster
        command: |
          det-deploy aws up \
            --cluster-id ${CLUSTER_ID} \
            --det-version ${CIRCLE_SHA1} \
            --agent-instance-type p2.xlarge \
            --max-dynamic-agents 1 \
            --keypair integrations-test
    - run:
        command: |
          MASTER_HOST=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} DeterminedAddress)
          echo "export MASTER_HOST=\"${MASTER_HOST}\"" >> $BASH_ENV
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m nightly \
          --durations=0 \
          --master-host="${MASTER_HOST}" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - run:
        name: Upload cloud watch logs S3
        when: always
        command: |
          LOG_GROUP=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} LogGroup)
          python .circleci/scripts/upload_cloud_watch_to_s3.py ${LOG_GROUP} det-ci-cloud-watch-logs ${CLUSTER_ID}
    - run:
        name: Terminate AWS Cluster
        when: always
        command: |
          det-deploy aws down \
            --cluster-id ${CLUSTER_ID}
    - store_test_results:
        path: /tmp/test-results/
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< "master"

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "xmaster" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "channel" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "channel"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"channel\": \"ml-ag\", \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"channel\": \"ml-ag\", \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`nightly\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`nightly\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  publish-python-package-deploy:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "false" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo twine >> /tmp/cachefile
          if [ -n  ]; then
            cat  >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install twine
        command: |
          if [ -n "twine" ]; then
            pip install twine
          fi
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install -r \nfi\n"
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: make -C deploy build
    - run:
        command: make -C deploy publish
  test-cli-python-38:
    docker:
    - image: python:3.8-slim-buster
    steps:
    - checkout
    - run:
        command: pip install wheel
    - run:
        command: cd common; python setup.py bdist_wheel -d ../build
    - run:
        command: cd cli; python setup.py bdist_wheel -d ../build
    - run:
        command: pip install --find-links build determined-cli==0.13.5.dev0
    - run:
        command: det --help
    - run:
        command: pip install setuptools_scm
    - run:
        command: pip install -r cli/tests/requirements.txt
    - run:
        command: pytest cli/tests
  package-and-push-system-dev:
    docker:
    - image: cimg/go:1.13
      environment:
        GO111MODULE: 'on'
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: curl -o /tmp/protoc.zip -L https://github.com/protocolbuffers/protobuf/releases/download/v3.12.1/protoc-3.12.1-linux-x86_64.zip
    - run:
        command: unzip /tmp/protoc.zip -d $HOME/.local
    - restore_cache:
        keys:
        - det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
    - run:
        command: make -C proto get-deps
    - run:
        command: make -C master get-deps
    - run:
        command: make -C agent get-deps
    - save_cache:
        key: det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
        paths:
        - /home/circleci/go/pkg/mod/
    - setup_remote_docker
    - run:
        command: make -C proto build
    - run:
        command: make package
    - run:
        command: echo "${DOCKER_PASS}" | docker login --username ${DOCKER_USER} --password-stdin
    - run:
        command: make -C master publish-dev
    - run:
        command: make -C agent publish-dev
  test-e2e-gpu-parallel-1:
    docker:
    - image: determinedai/cimg-base:stable
    parallelism: 2
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: echo "export CLUSTER_ID=\"parallel-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}\"" >> $BASH_ENV
    - run:
        name: Deploy AWS cluster
        command: |
          det-deploy aws up \
            --cluster-id ${CLUSTER_ID} \
            --det-version ${CIRCLE_SHA1} \
            --agent-instance-type p2.8xlarge \
            --max-dynamic-agents 1 \
            --keypair integrations-test
    - run:
        command: |
          MASTER_HOST=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} DeterminedAddress)
          echo "export MASTER_HOST=\"${MASTER_HOST}\"" >> $BASH_ENV
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m parallel \
          --durations=0 \
          --master-host="${MASTER_HOST}" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - run:
        name: Upload cloud watch logs S3
        when: always
        command: |
          LOG_GROUP=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} LogGroup)
          python .circleci/scripts/upload_cloud_watch_to_s3.py ${LOG_GROUP} det-ci-cloud-watch-logs ${CLUSTER_ID}
    - run:
        name: Terminate AWS Cluster
        when: always
        command: |
          det-deploy aws down \
            --cluster-id ${CLUSTER_ID}
    - store_test_results:
        path: /tmp/test-results/
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< "master"

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "xmaster" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "${SLACK_USER_ID}" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "${SLACK_USER_ID}"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`parallel\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`parallel\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  build-and-package-ts-sdk:
    docker:
    - image: cimg/openjdk:14.0.1
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: make -C webui/api-ts-sdk get-deps-swagger
    - run:
        command: make -C webui/api-ts-sdk build-swagger
    - persist_to_workspace:
        root: .
        paths:
        - webui/api-ts-sdk/src
  test-det-deploy-local:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    parallelism: 2
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: docker load --input build/master.image
    - run:
        command: docker load --input build/agent.image
    - run:
        command: pyenv global 3.6.10
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo ubuntu-1604:202004-01 > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: docker pull determinedai/environments:py-3.6.9-pytorch-1.4-tf-1.15-cpu-699677b
    - run:
        name: Run det-deploy tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m det_deploy_local \
          --det-version="$CIRCLE_SHA1"
  test-e2e-tf1:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    parallelism: 1
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: pyenv global 3.6.10
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo ubuntu-1604:202004-01 > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        name: Start database
        command: make -C tools start-db
    - run:
        name: Start cluster
        command: make -C tools run
        background: true
    - run:
        command: docker pull determinedai/environments:py-3.6.9-pytorch-1.4-tf-1.15-cpu-699677b
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://localhost:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m tensorflow1_cpu \
          --durations=0 \
          --master-host="localhost" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - store_test_results:
        path: /tmp/test-results/
  test-e2e-gpu-distributed:
    docker:
    - image: determinedai/cimg-base:stable
    parallelism: 1
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: echo "export CLUSTER_ID=\"distributed-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}\"" >> $BASH_ENV
    - run:
        name: Deploy AWS cluster
        command: |
          det-deploy aws up \
            --cluster-id ${CLUSTER_ID} \
            --det-version ${CIRCLE_SHA1} \
            --agent-instance-type p2.8xlarge \
            --max-dynamic-agents 2 \
            --keypair integrations-test
    - run:
        command: |
          MASTER_HOST=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} DeterminedAddress)
          echo "export MASTER_HOST=\"${MASTER_HOST}\"" >> $BASH_ENV
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m distributed \
          --durations=0 \
          --master-host="${MASTER_HOST}" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - run:
        name: Upload cloud watch logs S3
        when: always
        command: |
          LOG_GROUP=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} LogGroup)
          python .circleci/scripts/upload_cloud_watch_to_s3.py ${LOG_GROUP} det-ci-cloud-watch-logs ${CLUSTER_ID}
    - run:
        name: Terminate AWS Cluster
        when: always
        command: |
          det-deploy aws down \
            --cluster-id ${CLUSTER_ID}
    - store_test_results:
        path: /tmp/test-results/
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< "master"

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "xmaster" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "channel" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "channel"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"channel\": \"ml-ag\", \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"channel\": \"ml-ag\", \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`distributed\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`distributed\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  package-and-push-system-rc:
    docker:
    - image: cimg/go:1.13
      environment:
        GO111MODULE: 'on'
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: curl -o /tmp/protoc.zip -L https://github.com/protocolbuffers/protobuf/releases/download/v3.12.1/protoc-3.12.1-linux-x86_64.zip
    - run:
        command: unzip /tmp/protoc.zip -d $HOME/.local
    - restore_cache:
        keys:
        - det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
    - run:
        command: make -C proto get-deps
    - run:
        command: make -C master get-deps
    - run:
        command: make -C agent get-deps
    - save_cache:
        key: det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
        paths:
        - /home/circleci/go/pkg/mod/
    - setup_remote_docker
    - run:
        command: make -C proto build
    - run:
        command: make package
    - run:
        command: echo "${DOCKER_PASS}" | docker login --username ${DOCKER_USER} --password-stdin
    - run:
        command: make -C master publish
    - run:
        command: make -C agent publish
  build-docs:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo tensorflow==1.14 torch==1.4 >> /tmp/cachefile
          if [ -n docs/requirements.txt ]; then
            cat docs/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install tensorflow==1.14 torch==1.4
        command: |
          if [ -n "tensorflow==1.14 torch==1.4" ]; then
            pip install tensorflow==1.14 torch==1.4
          fi
    - run:
        name: Install docs/requirements.txt
        command: |
          if [ -n "docs/requirements.txt" ]; then
            pip install -r docs/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: make -C examples build
    - run:
        command: make -C helm build
    - run:
        command: make -C docs build
    - persist_to_workspace:
        root: .
        paths:
        - examples/build
        - helm/build
        - cli/dist
        - common/dist
        - harness/dist
        - docs/site/html
    - store_artifacts:
        path: docs/site/html
  build-storybook:
    docker:
    - image: cimg/node:12.16
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: make -C webui/api-ts-sdk get-deps-package
    - run:
        command: make -C webui/api-ts-sdk build-package
    - restore_cache:
        keys:
        - det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
    - run:
        name: Get React dependencies
        command: |
          make -C webui/react get-deps-api
          if [ ! -d "webui/react/node_modules" ]; then
            make -C webui/react get-deps-npm
          fi
    - save_cache:
        key: det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
        paths:
        - webui/react/node_modules
    - run:
        command: make -C webui/react build-storybook
    - store_artifacts:
        path: webui/react/build-storybook
  publish-python-package-cli:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "false" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo twine >> /tmp/cachefile
          if [ -n  ]; then
            cat  >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install twine
        command: |
          if [ -n "twine" ]; then
            pip install twine
          fi
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install -r \nfi\n"
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: make -C cli build
    - run:
        command: make -C cli publish
  package-and-push-system-release:
    docker:
    - image: cimg/go:1.13
      environment:
        GO111MODULE: 'on'
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: curl -o /tmp/protoc.zip -L https://github.com/protocolbuffers/protobuf/releases/download/v3.12.1/protoc-3.12.1-linux-x86_64.zip
    - run:
        command: unzip /tmp/protoc.zip -d $HOME/.local
    - restore_cache:
        keys:
        - det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
    - run:
        command: make -C proto get-deps
    - run:
        command: make -C master get-deps
    - run:
        command: make -C agent get-deps
    - save_cache:
        key: det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
        paths:
        - /home/circleci/go/pkg/mod/
    - setup_remote_docker
    - run:
        command: echo "${DOCKER_PASS}" | docker login --username ${DOCKER_USER} --password-stdin
    - run:
        command: make -C proto build
    - run:
        command: make -C master release
    - run:
        command: make -C agent release
  test-cli-win/default:
    machine:
      image: windows-server-2019-vs2019:stable
    steps:
    - checkout
    - run:
        command: pip install wheel
    - run:
        command: cd common; python setup.py bdist_wheel -d ../build
    - run:
        command: cd cli; python setup.py bdist_wheel -d ../build
    - run:
        command: pip install --find-links build determined-cli==0.13.5.dev0
    - run:
        command: det --help
    - run:
        command: pip install setuptools_scm
    - run:
        command: pip install -r cli/tests/requirements.txt
    - run:
        command: pytest cli/tests
    resource_class: windows.medium
    shell: powershell.exe -ExecutionPolicy Bypass
  build-go:
    docker:
    - image: cimg/go:1.13
      environment:
        GO111MODULE: 'on'
    steps:
    - checkout
    - run:
        command: curl -o /tmp/protoc.zip -L https://github.com/protocolbuffers/protobuf/releases/download/v3.12.1/protoc-3.12.1-linux-x86_64.zip
    - run:
        command: unzip /tmp/protoc.zip -d $HOME/.local
    - restore_cache:
        keys:
        - det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
    - run:
        command: make -C proto get-deps
    - run:
        command: make -C master get-deps
    - run:
        command: make -C agent get-deps
    - save_cache:
        key: det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
        paths:
        - /home/circleci/go/pkg/mod/
    - run:
        command: make -C proto build
    - run:
        command: make -C master build
    - run:
        command: make -C agent build
    - persist_to_workspace:
        root: .
        paths:
        - master/build
        - agent/build
  test-cli-python-35:
    docker:
    - image: python:3.5-slim-buster
    steps:
    - checkout
    - run:
        command: pip install wheel
    - run:
        command: cd common; python setup.py bdist_wheel -d ../build
    - run:
        command: cd cli; python setup.py bdist_wheel -d ../build
    - run:
        command: pip install --find-links build determined-cli==0.13.5.dev0
    - run:
        command: det --help
    - run:
        command: pip install setuptools_scm
    - run:
        command: pip install -r cli/tests/requirements.txt
    - run:
        command: pytest cli/tests
  lint-go:
    docker:
    - image: cimg/go:1.13
      environment:
        GO111MODULE: 'on'
    steps:
    - checkout
    - run:
        command: curl -o /tmp/protoc.zip -L https://github.com/protocolbuffers/protobuf/releases/download/v3.12.1/protoc-3.12.1-linux-x86_64.zip
    - run:
        command: unzip /tmp/protoc.zip -d $HOME/.local
    - restore_cache:
        keys:
        - det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
    - run:
        command: make -C proto get-deps
    - run:
        command: make -C master get-deps
    - run:
        command: make -C agent get-deps
    - save_cache:
        key: det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
        paths:
        - /home/circleci/go/pkg/mod/
    - run:
        command: make -C proto build
    - run:
        command: make -C proto check
    - run:
        command: make -C master check
    - run:
        command: make -C agent check
  deploy-1:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n  ]; then
            cat  >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install -r \nfi\n"
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        name: Deploy AWS cluster
        command: |
          det-deploy aws up \
            --cluster-id determined-${CIRCLE_BRANCH} \
            --det-version ${CIRCLE_SHA1} \
            --agent-instance-type p2.xlarge \
            --max-dynamic-agents 1 \
            --keypair integrations-test
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< ""

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "x" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "${SLACK_USER_ID}" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "${SLACK_USER_ID}"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`${CIRCLE_JOB}\` job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`${CIRCLE_JOB}\` job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  test-e2e-gke-parallel-2:
    docker:
    - image: determinedai/cimg-base:stable
    parallelism: 1
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: echo "export CLUSTER_ID=\"parallel-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}\"" >> $BASH_ENV
    - run:
        command: |
          install () {
            # Set sudo to work whether logged in as root user or non-root user
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            cd ~/
            curl -s https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-268.0.0-linux-x86_64.tar.gz | tar xz
            echo 'source ~/google-cloud-sdk/path.bash.inc' >> $BASH_ENV
          }

          if grep 'docker\|lxc' /proc/1/cgroup > /dev/null 2>&1; then
            if [[ $(command -v gcloud) == "" ]]; then
              install
            else
              echo "gcloud CLI is already installed."
            fi
          else
            echo "----------------------------------------------------------------------------------------------------"
            echo "this is a machine executor job, replacing default installation of gcloud CLI"
            echo "----------------------------------------------------------------------------------------------------"
            sudo rm -rf /opt/google-cloud-sdk
            install
          fi
        name: Install latest gcloud CLI version, if not available
    - run:
        command: gcloud version
        name: GCloud version
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
        name: Install kubectl
    - run:
        command: |
          IFS="," read -ra PARAMS <<< "GCLOUD_SERVICE_KEY,GOOGLE_PROJECT_ID,GOOGLE_COMPUTE_ZONE"

          for i in "${PARAMS[@]}"; do
            if [[ -z "${i}" ]]; then
              echo "ERROR: Missing environment variable {i}" >&2

              if [[ -n "" ]]; then
                echo "" >&2
              fi

              exit 1
            else
              echo "Yes, ${i} is defined!"
            fi
          done
        name: Checking whether required env vars are set to initialize gcloud CLI...
    - run:
        command: |
          # Store service account
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

          # Initialize gcloud CLI
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
          gcloud --quiet config set project $GOOGLE_PROJECT_ID
          gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
        name: Initialize gcloud CLI to connect to Google Cloud
    - run:
        command: |+
          gcloud container clusters create ${CLUSTER_ID} --cluster-version=1.16.13-gke.1 \
          --machine-type=n1-standard-32 \
          --num-nodes=2 \
          --accelerator type=nvidia-tesla-k80,count=4 \
          --region=us-west1 \
          --node-locations=us-west1-b \
          --scopes=storage-rw \
          --image-type=UBUNTU

        name: Create GKE cluster
        no_output_timeout: 10m
    - run:
        command: |+
          RESOURCE_FILE_PATH=".circleci/scripts/gpu-daemonset.yaml"
          ACTION_TYPE="apply"
          NAMESPACE=""
          DRY_RUN="false"
          KUSTOMIZE="false"
          if [ -n "${ACTION_TYPE}" ]; then
            set -- "$@" "${ACTION_TYPE}"
          fi
          if [ -n "${RESOURCE_FILE_PATH}" ]; then
            if [ "${KUSTOMIZE}" == "true" ]; then
              set -- "$@" -k
            else
              set -- "$@" -f
            fi
            set -- "$@" "${RESOURCE_FILE_PATH}"
          fi
          if [ -n "${NAMESPACE}" ]; then
              set -- "$@" --namespace="${NAMESPACE}"
          fi
          if [ "${DRY_RUN}" == "true" ]; then
            set -- "$@" --dry-run
          fi

          kubectl "$@"

        name: Create/update the k8s resource
    - run:
        command: |
          if which helm > /dev/null; then
            echo "helm is already installed"
            exit 0
          fi
          VERSION="v3.2.4"
          IS_VERSION_2="true"
          if [ -n "${VERSION}" ]; then
            set -- "$@" --version "${VERSION}"
            if [ "${VERSION}" == "${VERSION#v2.}" ]; then
              IS_VERSION_2="false"
            fi
          fi
          INSTALL_SCRIPT="https://raw.githubusercontent.com/helm/helm/master/scripts/get"
          curl "${INSTALL_SCRIPT}" > get_helm.sh
          chmod 700 get_helm.sh
          ./get_helm.sh "$@"
          if [ "${IS_VERSION_2}" == "true" ]; then
            helm init --client-only
          else
            helm repo add stable https://kubernetes-charts.storage.googleapis.com
          fi
        name: Install and init the helm client (if necessary)
    - run:
        command: |
          helm repo update
        name: Update repositories
    - run:
        command: |
          RELEASE_NAME="ci"
          VALUES_TO_OVERRIDE="detVersion=${CIRCLE_SHA1},\
          maxSlotsPerPod=4,\
          checkpointStorage.type=gcs,\
          checkpointStorage.bucket=det-ci
          "
          NAMESPACE="default"
          TLS="false"
          TLS_CA_CERT=""
          TLS_CERT=""
          TLS_HOSTNAME=""
          TLS_KEY=""
          TLS_VERIFY="false"
          TILLER_NAMESPACE=""
          WAIT="true"
          if [ -n "${VALUES_TO_OVERRIDE}" ]; then
            set -- "$@" --set "${VALUES_TO_OVERRIDE}"
          fi
          if [ -n "${NAMESPACE}" ]; then
            set -- "$@" --namespace="${NAMESPACE}"
          fi
          if [ "${TLS}" == "true" ]; then
            set -- "$@" --tls
          fi
          if [ -n "${TLS_CA_CERT}" ]; then
            set -- "$@" --tls-ca-cert="${TLS_CA_CERT}"
          fi
          if [ -n "${TLS_CERT}" ]; then
            set -- "$@" --tls-cert="${TLS_CERT}"
          fi
          if [ -n "${TLS_HOSTNAME}" ]; then
            set -- "$@" --tls-hostname="${TLS_HOSTNAME}"
          fi
          if [ -n "${TLS_KEY}" ]; then
            set -- "$@" --tls-key="${TLS_KEY}"
          fi
          if [ "${TLS_VERIFY}" == "true" ]; then
            set -- "$@" --tls-verify
          fi
          if [ -n "${TILLER_NAMESPACE}" ]; then
            set -- "$@" --tiller-namespace "${TILLER_NAMESPACE}"
          fi
          if [ "${WAIT}" == "true" ]; then
            set -- "$@" --wait
          fi

          VERSION_2_MATCH="$(helm version --short -c | grep 'Client: v2' || true)"
          if [ -n "${VERSION_2_MATCH}" ]; then
            if [ -n "${RELEASE_NAME}" ]; then
              set -- "$@" --name "${RELEASE_NAME}"
            fi
            helm install helm/charts/determined "$@"
          else
            if [ -n "${RELEASE_NAME}" ]; then
              helm install "${RELEASE_NAME}" helm/charts/determined "$@"
            else
              set -- "$@" --generate-name
              helm install helm/charts/determined "$@"
            fi
          fi
        name: Install chart
        no_output_timeout: 30m
    - run:
        name: Set Master Address
        command: |
          MASTER_HOST=$(kubectl get -n default  service determined-master-service-ci \
          --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "export MASTER_HOST=\"${MASTER_HOST}\"" >> $BASH_ENV
          echo "${MASTER_HOST}"
    - run:
        name: Set Google Application Credentials
        command: |
          GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
          echo "export GOOGLE_APPLICATION_CREDENTIALS=\"${GOOGLE_APPLICATION_CREDENTIALS}\"" >> $BASH_ENV
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m parallel \
          --durations=0 \
          --master-host="${MASTER_HOST}" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - run:
        name: Terminate GKE Cluster
        when: always
        command: |
          gcloud container clusters delete ${CLUSTER_ID} --quiet --region=us-west1
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< "master"

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "xmaster" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "${SLACK_USER_ID}" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "${SLACK_USER_ID}"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`parallel\` E2E GKE GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`parallel\` E2E GKE GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  lint-react:
    docker:
    - image: cimg/node:12.16
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: make -C webui/api-ts-sdk get-deps-package
    - run:
        command: make -C webui/api-ts-sdk build-package
    - restore_cache:
        keys:
        - det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
    - run:
        name: Get React dependencies
        command: |
          make -C webui/react get-deps-api
          if [ ! -d "webui/react/node_modules" ]; then
            make -C webui/react get-deps-npm
          fi
    - save_cache:
        key: det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
        paths:
        - webui/react/node_modules
    - run:
        command: make -C webui/react check
  test-e2e-webui:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: docker load --input build/master.image
    - run:
        command: docker load --input build/agent.image
    - run:
        command: |
          . /opt/circleci/.nvm/nvm.sh
          nvm install v12
          nvm alias default v12
          make -C webui/tests get-deps
    - run:
        command: docker pull cypress/included:4.8.0
    - run:
        command: pyenv global 3.6.10
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo ubuntu-1604:202004-01 > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n webui/tests/requirements.txt ]; then
            cat webui/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install webui/tests/requirements.txt
        command: |
          if [ -n "webui/tests/requirements.txt" ]; then
            pip install -r webui/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: det-deploy local cluster-up --no-gpu --delete-db --det-version ${CIRCLE_SHA1}
    - run:
        command: python webui/tests/bin/createUserAndExperiments.py
    - run:
        command: |
          mkdir -p webui/tests/results
          docker run \
            --name e2e_cypress \
            --network=determined_default \
            --mount type=bind,source=$(pwd)/webui,target=/webui \
            -w /webui/tests \
            --env DET_MASTER=determined-master:8080 \
            cypress/included:4.8.0 \
            --config-file cypress-ci.json \
            --config "defaultCommandTimeout=30000,baseUrl=http://determined-master:8080" \
            --browser electron
    - run:
        name: Dump det-deploy logs
        when: always
        command: det-deploy local logs --no-follow
    - store_test_results:
        path: webui/tests/results/
    - store_artifacts:
        path: webui/tests/results/recordings
  test-e2e-gpu-single-2:
    docker:
    - image: determinedai/cimg-base:stable
    parallelism: 2
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: echo "export CLUSTER_ID=\"e2e-gpu-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}\"" >> $BASH_ENV
    - run:
        name: Deploy AWS cluster
        command: |
          det-deploy aws up \
            --cluster-id ${CLUSTER_ID} \
            --det-version ${CIRCLE_SHA1} \
            --agent-instance-type p2.xlarge \
            --max-dynamic-agents 1 \
            --keypair integrations-test
    - run:
        command: |
          MASTER_HOST=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} DeterminedAddress)
          echo "export MASTER_HOST=\"${MASTER_HOST}\"" >> $BASH_ENV
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m e2e_gpu \
          --durations=0 \
          --master-host="${MASTER_HOST}" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - run:
        name: Upload cloud watch logs S3
        when: always
        command: |
          LOG_GROUP=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} LogGroup)
          python .circleci/scripts/upload_cloud_watch_to_s3.py ${LOG_GROUP} det-ci-cloud-watch-logs ${CLUSTER_ID}
    - run:
        name: Terminate AWS Cluster
        when: always
        command: |
          det-deploy aws down \
            --cluster-id ${CLUSTER_ID}
    - store_test_results:
        path: /tmp/test-results/
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< "master"

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "xmaster" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "${SLACK_USER_ID}" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "${SLACK_USER_ID}"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`e2e_gpu\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`e2e_gpu\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  test-unit-harness:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo tensorflow==1.14.0 torch==1.4.0 torchvision==0.5.0 >> /tmp/cachefile
          if [ -n harness/tests/requirements.txt ]; then
            cat harness/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install tensorflow==1.14.0 torch==1.4.0 torchvision==0.5.0
        command: |
          if [ -n "tensorflow==1.14.0 torch==1.4.0 torchvision==0.5.0" ]; then
            pip install tensorflow==1.14.0 torch==1.4.0 torchvision==0.5.0
          fi
    - run:
        name: Install harness/tests/requirements.txt
        command: |
          if [ -n "harness/tests/requirements.txt" ]; then
            pip install -r harness/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: make -C harness test
  lint-python:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo torch==1.4.0 >> /tmp/cachefile
          if [ -n requirements.txt ]; then
            cat requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: Install torch==1.4.0
        command: |
          if [ -n "torch==1.4.0" ]; then
            pip install torch==1.4.0
          fi
    - run:
        name: Install requirements.txt
        command: |
          if [ -n "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: make -C cli check
    - run:
        command: make -C common check
    - run:
        command: make -C harness check
    - run:
        command: make -C deploy check
    - run:
        command: make -C e2e_tests check
    - run:
        command: make -C examples check
    - run:
        command: make -C tools check
  test-unit-react:
    docker:
    - image: cimg/node:12.16
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: make -C webui/api-ts-sdk get-deps-package
    - run:
        command: make -C webui/api-ts-sdk build-package
    - restore_cache:
        keys:
        - det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
    - run:
        name: Get React dependencies
        command: |
          make -C webui/react get-deps-api
          if [ ! -d "webui/react/node_modules" ]; then
            make -C webui/react get-deps-npm
          fi
    - save_cache:
        key: det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
        paths:
        - webui/react/node_modules
    - run:
        command: make -C webui/react test
  package-and-push-system-local:
    docker:
    - image: cimg/go:1.13
      environment:
        GO111MODULE: 'on'
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: curl -o /tmp/protoc.zip -L https://github.com/protocolbuffers/protobuf/releases/download/v3.12.1/protoc-3.12.1-linux-x86_64.zip
    - run:
        command: unzip /tmp/protoc.zip -d $HOME/.local
    - restore_cache:
        keys:
        - det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
    - run:
        command: make -C proto get-deps
    - run:
        command: make -C master get-deps
    - run:
        command: make -C agent get-deps
    - save_cache:
        key: det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
        paths:
        - /home/circleci/go/pkg/mod/
    - setup_remote_docker
    - run:
        command: make -C proto build
    - run:
        command: make package
    - run:
        command: mkdir -p build/
    - run:
        command: docker save -o build/master.image determinedai/determined-master:${CIRCLE_SHA1}
    - run:
        command: docker save -o build/agent.image determinedai/determined-agent:${CIRCLE_SHA1}
    - persist_to_workspace:
        root: .
        paths:
        - master/dist/*linux_amd64.deb
        - master/dist/*linux_amd64.rpm
        - agent/dist/*linux_amd64.deb
        - agent/dist/*linux_amd64.rpm
        - build/*.image
  publish-python-package-common:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "false" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo twine >> /tmp/cachefile
          if [ -n  ]; then
            cat  >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install twine
        command: |
          if [ -n "twine" ]; then
            pip install twine
          fi
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install -r \nfi\n"
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: make -C common build
    - run:
        command: make -C common publish
  test-debian-packaging:
    machine:
      image: ubuntu-1604:202004-01
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: sudo apt-get install -y $(pwd)/master/dist/determined-master*.deb
    - run:
        command: sudo apt-get install -y $(pwd)/agent/dist/determined-agent*.deb
    - run:
        command: sudo cp .circleci/packaging/master.yaml /etc/determined/master.yaml
    - run:
        command: sudo cp .circleci/packaging/agent.yaml /etc/determined/agent.yaml
    - run:
        command: make -C tools start-db
    - run:
        command: python3 .circleci/scripts/wait_for_server.py localhost 5432
    - run:
        command: sudo systemctl restart determined-master
    - run:
        command: python3 .circleci/scripts/wait_for_server.py localhost 8080
    - run:
        command: sudo systemctl restart determined-agent
    - run:
        command: ./.circleci/scripts/sanity.sh
  publish-python-package-harness:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "false" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo twine >> /tmp/cachefile
          if [ -n  ]; then
            cat  >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install twine
        command: |
          if [ -n "twine" ]; then
            pip install twine
          fi
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install -r \nfi\n"
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: make -C harness build
    - run:
        command: make -C harness publish
  upload-try-now-template:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "false" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo awscli >> /tmp/cachefile
          if [ -n  ]; then
            cat  >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install awscli
        command: |
          if [ -n "awscli" ]; then
            pip install awscli
          fi
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install -r \nfi\n"
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: make -C deploy upload-try-now-template
  publish-docs:
    docker:
    - image: hashicorp/terraform:light
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: apk add make curl python3 py3-pip
    - run:
        command: pip3 install awscli
    - run:
        command: make -C docs/deploy publish
  build-react:
    docker:
    - image: cimg/node:12.16
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: make -C webui/api-ts-sdk get-deps-package
    - run:
        command: make -C webui/api-ts-sdk build-package
    - restore_cache:
        keys:
        - det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
    - run:
        name: Get React dependencies
        command: |
          make -C webui/react get-deps-api
          if [ ! -d "webui/react/node_modules" ]; then
            make -C webui/react get-deps-npm
          fi
    - save_cache:
        key: det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
        paths:
        - webui/react/node_modules
    - run:
        command: make -C webui/react build
    - persist_to_workspace:
        root: .
        paths:
        - webui/react/build
  build-proto:
    docker:
    - image: cimg/go:1.13
      environment:
        GO111MODULE: 'on'
    steps:
    - checkout
    - run:
        command: curl -o /tmp/protoc.zip -L https://github.com/protocolbuffers/protobuf/releases/download/v3.12.1/protoc-3.12.1-linux-x86_64.zip
    - run:
        command: unzip /tmp/protoc.zip -d $HOME/.local
    - restore_cache:
        keys:
        - det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
    - run:
        command: make -C proto get-deps
    - run:
        command: make -C master get-deps
    - run:
        command: make -C agent get-deps
    - save_cache:
        key: det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
        paths:
        - /home/circleci/go/pkg/mod/
    - run:
        command: make -C proto build
    - persist_to_workspace:
        root: .
        paths:
        - proto/build/**/*
  test-e2e-cpu:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    parallelism: 4
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: pyenv global 3.6.10
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo ubuntu-1604:202004-01 > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        name: Start database
        command: make -C tools start-db
    - run:
        name: Start cluster
        command: make -C tools run
        background: true
    - run:
        command: docker pull determinedai/environments:py-3.6.9-pytorch-1.4-tf-1.15-cpu-699677b
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://localhost:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m e2e_cpu \
          --durations=0 \
          --master-host="localhost" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - store_test_results:
        path: /tmp/test-results/
  test-e2e-gpu-single-1:
    docker:
    - image: determinedai/cimg-base:stable
    parallelism: 2
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: echo "export CLUSTER_ID=\"e2e-gpu-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}\"" >> $BASH_ENV
    - run:
        name: Deploy AWS cluster
        command: |
          det-deploy aws up \
            --cluster-id ${CLUSTER_ID} \
            --det-version ${CIRCLE_SHA1} \
            --agent-instance-type p2.xlarge \
            --max-dynamic-agents 1 \
            --keypair integrations-test
    - run:
        command: |
          MASTER_HOST=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} DeterminedAddress)
          echo "export MASTER_HOST=\"${MASTER_HOST}\"" >> $BASH_ENV
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m e2e_gpu \
          --durations=0 \
          --master-host="${MASTER_HOST}" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - run:
        name: Upload cloud watch logs S3
        when: always
        command: |
          LOG_GROUP=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} LogGroup)
          python .circleci/scripts/upload_cloud_watch_to_s3.py ${LOG_GROUP} det-ci-cloud-watch-logs ${CLUSTER_ID}
    - run:
        name: Terminate AWS Cluster
        when: always
        command: |
          det-deploy aws down \
            --cluster-id ${CLUSTER_ID}
    - store_test_results:
        path: /tmp/test-results/
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< "master"

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "xmaster" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "${SLACK_USER_ID}" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "${SLACK_USER_ID}"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`e2e_gpu\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`e2e_gpu\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  test-unit-harness-tf2:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo tensorflow==2.2.0 >> /tmp/cachefile
          if [ -n harness/tests/requirements.txt ]; then
            cat harness/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install tensorflow==2.2.0
        command: |
          if [ -n "tensorflow==2.2.0" ]; then
            pip install tensorflow==2.2.0
          fi
    - run:
        name: Install harness/tests/requirements.txt
        command: |
          if [ -n "harness/tests/requirements.txt" ]; then
            pip install -r harness/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: make -C harness test-tf2
  test-unit-go:
    docker:
    - image: cimg/go:1.13
      environment:
        GO111MODULE: 'on'
    steps:
    - checkout
    - run:
        command: curl -o /tmp/protoc.zip -L https://github.com/protocolbuffers/protobuf/releases/download/v3.12.1/protoc-3.12.1-linux-x86_64.zip
    - run:
        command: unzip /tmp/protoc.zip -d $HOME/.local
    - restore_cache:
        keys:
        - det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
    - run:
        command: make -C proto get-deps
    - run:
        command: make -C master get-deps
    - run:
        command: make -C agent get-deps
    - save_cache:
        key: det-go-deps-v1dev7-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}-{{ checksum  "proto/go.sum" }}
        paths:
        - /home/circleci/go/pkg/mod/
    - run:
        command: make -C proto build
    - run:
        command: make -C master test
    - run:
        command: make -C agent test
  test-e2e-gpu-parallel-2:
    docker:
    - image: determinedai/cimg-base:stable
    parallelism: 2
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: echo "export CLUSTER_ID=\"parallel-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}\"" >> $BASH_ENV
    - run:
        name: Deploy AWS cluster
        command: |
          det-deploy aws up \
            --cluster-id ${CLUSTER_ID} \
            --det-version ${CIRCLE_SHA1} \
            --agent-instance-type p2.8xlarge \
            --max-dynamic-agents 1 \
            --keypair integrations-test
    - run:
        command: |
          MASTER_HOST=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} DeterminedAddress)
          echo "export MASTER_HOST=\"${MASTER_HOST}\"" >> $BASH_ENV
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m parallel \
          --durations=0 \
          --master-host="${MASTER_HOST}" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - run:
        name: Upload cloud watch logs S3
        when: always
        command: |
          LOG_GROUP=$(python .circleci/scripts/get_output_from_stack.py ${CLUSTER_ID} LogGroup)
          python .circleci/scripts/upload_cloud_watch_to_s3.py ${LOG_GROUP} det-ci-cloud-watch-logs ${CLUSTER_ID}
    - run:
        name: Terminate AWS Cluster
        when: always
        command: |
          det-deploy aws down \
            --cluster-id ${CLUSTER_ID}
    - store_test_results:
        path: /tmp/test-results/
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< "master"

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "xmaster" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "${SLACK_USER_ID}" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "${SLACK_USER_ID}"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`parallel\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`parallel\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  test-cli-python-36:
    docker:
    - image: python:3.6-slim-buster
    steps:
    - checkout
    - run:
        command: pip install wheel
    - run:
        command: cd common; python setup.py bdist_wheel -d ../build
    - run:
        command: cd cli; python setup.py bdist_wheel -d ../build
    - run:
        command: pip install --find-links build determined-cli==0.13.5.dev0
    - run:
        command: det --help
    - run:
        command: pip install setuptools_scm
    - run:
        command: pip install -r cli/tests/requirements.txt
    - run:
        command: pytest cli/tests
  deploy-2:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n  ]; then
            cat  >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install -r \nfi\n"
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        name: Deploy AWS cluster
        command: |
          det-deploy aws up \
            --cluster-id determined-${CIRCLE_BRANCH} \
            --det-version ${CIRCLE_SHA1} \
            --agent-instance-type p2.xlarge \
            --max-dynamic-agents 1 \
            --keypair integrations-test
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< ""

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "x" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "${SLACK_USER_ID}" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "${SLACK_USER_ID}"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`${CIRCLE_JOB}\` job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`${CIRCLE_JOB}\` job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  test-cli-python-37:
    docker:
    - image: python:3.7-slim-buster
    steps:
    - checkout
    - run:
        command: pip install wheel
    - run:
        command: cd common; python setup.py bdist_wheel -d ../build
    - run:
        command: cd cli; python setup.py bdist_wheel -d ../build
    - run:
        command: pip install --find-links build determined-cli==0.13.5.dev0
    - run:
        command: det --help
    - run:
        command: pip install setuptools_scm
    - run:
        command: pip install -r cli/tests/requirements.txt
    - run:
        command: pytest cli/tests
  test-examples:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n examples/tests/requirements.txt ]; then
            cat examples/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install examples/tests/requirements.txt
        command: |
          if [ -n "examples/tests/requirements.txt" ]; then
            pip install -r examples/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: make -C examples test
  test-e2e-gke-parallel-1:
    docker:
    - image: determinedai/cimg-base:stable
    parallelism: 1
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: echo "export CLUSTER_ID=\"parallel-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}\"" >> $BASH_ENV
    - run:
        command: |
          install () {
            # Set sudo to work whether logged in as root user or non-root user
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            cd ~/
            curl -s https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-268.0.0-linux-x86_64.tar.gz | tar xz
            echo 'source ~/google-cloud-sdk/path.bash.inc' >> $BASH_ENV
          }

          if grep 'docker\|lxc' /proc/1/cgroup > /dev/null 2>&1; then
            if [[ $(command -v gcloud) == "" ]]; then
              install
            else
              echo "gcloud CLI is already installed."
            fi
          else
            echo "----------------------------------------------------------------------------------------------------"
            echo "this is a machine executor job, replacing default installation of gcloud CLI"
            echo "----------------------------------------------------------------------------------------------------"
            sudo rm -rf /opt/google-cloud-sdk
            install
          fi
        name: Install latest gcloud CLI version, if not available
    - run:
        command: gcloud version
        name: GCloud version
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
        name: Install kubectl
    - run:
        command: |
          IFS="," read -ra PARAMS <<< "GCLOUD_SERVICE_KEY,GOOGLE_PROJECT_ID,GOOGLE_COMPUTE_ZONE"

          for i in "${PARAMS[@]}"; do
            if [[ -z "${i}" ]]; then
              echo "ERROR: Missing environment variable {i}" >&2

              if [[ -n "" ]]; then
                echo "" >&2
              fi

              exit 1
            else
              echo "Yes, ${i} is defined!"
            fi
          done
        name: Checking whether required env vars are set to initialize gcloud CLI...
    - run:
        command: |
          # Store service account
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

          # Initialize gcloud CLI
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
          gcloud --quiet config set project $GOOGLE_PROJECT_ID
          gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
        name: Initialize gcloud CLI to connect to Google Cloud
    - run:
        command: |+
          gcloud container clusters create ${CLUSTER_ID} --cluster-version=1.16.13-gke.1 \
          --machine-type=n1-standard-32 \
          --num-nodes=2 \
          --accelerator type=nvidia-tesla-k80,count=4 \
          --region=us-west1 \
          --node-locations=us-west1-b \
          --scopes=storage-rw \
          --image-type=UBUNTU

        name: Create GKE cluster
        no_output_timeout: 10m
    - run:
        command: |+
          RESOURCE_FILE_PATH=".circleci/scripts/gpu-daemonset.yaml"
          ACTION_TYPE="apply"
          NAMESPACE=""
          DRY_RUN="false"
          KUSTOMIZE="false"
          if [ -n "${ACTION_TYPE}" ]; then
            set -- "$@" "${ACTION_TYPE}"
          fi
          if [ -n "${RESOURCE_FILE_PATH}" ]; then
            if [ "${KUSTOMIZE}" == "true" ]; then
              set -- "$@" -k
            else
              set -- "$@" -f
            fi
            set -- "$@" "${RESOURCE_FILE_PATH}"
          fi
          if [ -n "${NAMESPACE}" ]; then
              set -- "$@" --namespace="${NAMESPACE}"
          fi
          if [ "${DRY_RUN}" == "true" ]; then
            set -- "$@" --dry-run
          fi

          kubectl "$@"

        name: Create/update the k8s resource
    - run:
        command: |
          if which helm > /dev/null; then
            echo "helm is already installed"
            exit 0
          fi
          VERSION="v3.2.4"
          IS_VERSION_2="true"
          if [ -n "${VERSION}" ]; then
            set -- "$@" --version "${VERSION}"
            if [ "${VERSION}" == "${VERSION#v2.}" ]; then
              IS_VERSION_2="false"
            fi
          fi
          INSTALL_SCRIPT="https://raw.githubusercontent.com/helm/helm/master/scripts/get"
          curl "${INSTALL_SCRIPT}" > get_helm.sh
          chmod 700 get_helm.sh
          ./get_helm.sh "$@"
          if [ "${IS_VERSION_2}" == "true" ]; then
            helm init --client-only
          else
            helm repo add stable https://kubernetes-charts.storage.googleapis.com
          fi
        name: Install and init the helm client (if necessary)
    - run:
        command: |
          helm repo update
        name: Update repositories
    - run:
        command: |
          RELEASE_NAME="ci"
          VALUES_TO_OVERRIDE="detVersion=${CIRCLE_SHA1},\
          maxSlotsPerPod=4,\
          checkpointStorage.type=gcs,\
          checkpointStorage.bucket=det-ci
          "
          NAMESPACE="default"
          TLS="false"
          TLS_CA_CERT=""
          TLS_CERT=""
          TLS_HOSTNAME=""
          TLS_KEY=""
          TLS_VERIFY="false"
          TILLER_NAMESPACE=""
          WAIT="true"
          if [ -n "${VALUES_TO_OVERRIDE}" ]; then
            set -- "$@" --set "${VALUES_TO_OVERRIDE}"
          fi
          if [ -n "${NAMESPACE}" ]; then
            set -- "$@" --namespace="${NAMESPACE}"
          fi
          if [ "${TLS}" == "true" ]; then
            set -- "$@" --tls
          fi
          if [ -n "${TLS_CA_CERT}" ]; then
            set -- "$@" --tls-ca-cert="${TLS_CA_CERT}"
          fi
          if [ -n "${TLS_CERT}" ]; then
            set -- "$@" --tls-cert="${TLS_CERT}"
          fi
          if [ -n "${TLS_HOSTNAME}" ]; then
            set -- "$@" --tls-hostname="${TLS_HOSTNAME}"
          fi
          if [ -n "${TLS_KEY}" ]; then
            set -- "$@" --tls-key="${TLS_KEY}"
          fi
          if [ "${TLS_VERIFY}" == "true" ]; then
            set -- "$@" --tls-verify
          fi
          if [ -n "${TILLER_NAMESPACE}" ]; then
            set -- "$@" --tiller-namespace "${TILLER_NAMESPACE}"
          fi
          if [ "${WAIT}" == "true" ]; then
            set -- "$@" --wait
          fi

          VERSION_2_MATCH="$(helm version --short -c | grep 'Client: v2' || true)"
          if [ -n "${VERSION_2_MATCH}" ]; then
            if [ -n "${RELEASE_NAME}" ]; then
              set -- "$@" --name "${RELEASE_NAME}"
            fi
            helm install helm/charts/determined "$@"
          else
            if [ -n "${RELEASE_NAME}" ]; then
              helm install "${RELEASE_NAME}" helm/charts/determined "$@"
            else
              set -- "$@" --generate-name
              helm install helm/charts/determined "$@"
            fi
          fi
        name: Install chart
        no_output_timeout: 30m
    - run:
        name: Set Master Address
        command: |
          MASTER_HOST=$(kubectl get -n default  service determined-master-service-ci \
          --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "export MASTER_HOST=\"${MASTER_HOST}\"" >> $BASH_ENV
          echo "${MASTER_HOST}"
    - run:
        name: Set Google Application Credentials
        command: |
          GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
          echo "export GOOGLE_APPLICATION_CREDENTIALS=\"${GOOGLE_APPLICATION_CREDENTIALS}\"" >> $BASH_ENV
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m parallel \
          --durations=0 \
          --master-host="${MASTER_HOST}" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - run:
        name: Terminate GKE Cluster
        when: always
        command: |
          gcloud container clusters delete ${CLUSTER_ID} --quiet --region=us-west1
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< "master"

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "xmaster" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "${SLACK_USER_ID}" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "${SLACK_USER_ID}"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`parallel\` E2E GKE GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`parallel\` E2E GKE GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  test-e2e-gke-single-gpu-1:
    docker:
    - image: determinedai/cimg-base:stable
    parallelism: 1
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        command: echo "export CLUSTER_ID=\"e2e-gpu-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}\"" >> $BASH_ENV
    - run:
        command: |
          install () {
            # Set sudo to work whether logged in as root user or non-root user
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            cd ~/
            curl -s https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-268.0.0-linux-x86_64.tar.gz | tar xz
            echo 'source ~/google-cloud-sdk/path.bash.inc' >> $BASH_ENV
          }

          if grep 'docker\|lxc' /proc/1/cgroup > /dev/null 2>&1; then
            if [[ $(command -v gcloud) == "" ]]; then
              install
            else
              echo "gcloud CLI is already installed."
            fi
          else
            echo "----------------------------------------------------------------------------------------------------"
            echo "this is a machine executor job, replacing default installation of gcloud CLI"
            echo "----------------------------------------------------------------------------------------------------"
            sudo rm -rf /opt/google-cloud-sdk
            install
          fi
        name: Install latest gcloud CLI version, if not available
    - run:
        command: gcloud version
        name: GCloud version
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
        name: Install kubectl
    - run:
        command: |
          IFS="," read -ra PARAMS <<< "GCLOUD_SERVICE_KEY,GOOGLE_PROJECT_ID,GOOGLE_COMPUTE_ZONE"

          for i in "${PARAMS[@]}"; do
            if [[ -z "${i}" ]]; then
              echo "ERROR: Missing environment variable {i}" >&2

              if [[ -n "" ]]; then
                echo "" >&2
              fi

              exit 1
            else
              echo "Yes, ${i} is defined!"
            fi
          done
        name: Checking whether required env vars are set to initialize gcloud CLI...
    - run:
        command: |
          # Store service account
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

          # Initialize gcloud CLI
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
          gcloud --quiet config set project $GOOGLE_PROJECT_ID
          gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
        name: Initialize gcloud CLI to connect to Google Cloud
    - run:
        command: |+
          gcloud container clusters create ${CLUSTER_ID} --cluster-version=1.16.13-gke.1 \
          --machine-type=n1-standard-8 \
          --num-nodes=1 \
          --accelerator type=nvidia-tesla-k80,count=1 \
          --region=us-west1 \
          --node-locations=us-west1-b \
          --scopes=storage-rw \
          --image-type=UBUNTU

        name: Create GKE cluster
        no_output_timeout: 10m
    - run:
        command: |+
          RESOURCE_FILE_PATH=".circleci/scripts/gpu-daemonset.yaml"
          ACTION_TYPE="apply"
          NAMESPACE=""
          DRY_RUN="false"
          KUSTOMIZE="false"
          if [ -n "${ACTION_TYPE}" ]; then
            set -- "$@" "${ACTION_TYPE}"
          fi
          if [ -n "${RESOURCE_FILE_PATH}" ]; then
            if [ "${KUSTOMIZE}" == "true" ]; then
              set -- "$@" -k
            else
              set -- "$@" -f
            fi
            set -- "$@" "${RESOURCE_FILE_PATH}"
          fi
          if [ -n "${NAMESPACE}" ]; then
              set -- "$@" --namespace="${NAMESPACE}"
          fi
          if [ "${DRY_RUN}" == "true" ]; then
            set -- "$@" --dry-run
          fi

          kubectl "$@"

        name: Create/update the k8s resource
    - run:
        command: |
          if which helm > /dev/null; then
            echo "helm is already installed"
            exit 0
          fi
          VERSION="v3.2.4"
          IS_VERSION_2="true"
          if [ -n "${VERSION}" ]; then
            set -- "$@" --version "${VERSION}"
            if [ "${VERSION}" == "${VERSION#v2.}" ]; then
              IS_VERSION_2="false"
            fi
          fi
          INSTALL_SCRIPT="https://raw.githubusercontent.com/helm/helm/master/scripts/get"
          curl "${INSTALL_SCRIPT}" > get_helm.sh
          chmod 700 get_helm.sh
          ./get_helm.sh "$@"
          if [ "${IS_VERSION_2}" == "true" ]; then
            helm init --client-only
          else
            helm repo add stable https://kubernetes-charts.storage.googleapis.com
          fi
        name: Install and init the helm client (if necessary)
    - run:
        command: |
          helm repo update
        name: Update repositories
    - run:
        command: |
          RELEASE_NAME="ci"
          VALUES_TO_OVERRIDE="detVersion=${CIRCLE_SHA1},\
          maxSlotsPerPod=1,\
          checkpointStorage.type=gcs,\
          checkpointStorage.bucket=det-ci
          "
          NAMESPACE="default"
          TLS="false"
          TLS_CA_CERT=""
          TLS_CERT=""
          TLS_HOSTNAME=""
          TLS_KEY=""
          TLS_VERIFY="false"
          TILLER_NAMESPACE=""
          WAIT="true"
          if [ -n "${VALUES_TO_OVERRIDE}" ]; then
            set -- "$@" --set "${VALUES_TO_OVERRIDE}"
          fi
          if [ -n "${NAMESPACE}" ]; then
            set -- "$@" --namespace="${NAMESPACE}"
          fi
          if [ "${TLS}" == "true" ]; then
            set -- "$@" --tls
          fi
          if [ -n "${TLS_CA_CERT}" ]; then
            set -- "$@" --tls-ca-cert="${TLS_CA_CERT}"
          fi
          if [ -n "${TLS_CERT}" ]; then
            set -- "$@" --tls-cert="${TLS_CERT}"
          fi
          if [ -n "${TLS_HOSTNAME}" ]; then
            set -- "$@" --tls-hostname="${TLS_HOSTNAME}"
          fi
          if [ -n "${TLS_KEY}" ]; then
            set -- "$@" --tls-key="${TLS_KEY}"
          fi
          if [ "${TLS_VERIFY}" == "true" ]; then
            set -- "$@" --tls-verify
          fi
          if [ -n "${TILLER_NAMESPACE}" ]; then
            set -- "$@" --tiller-namespace "${TILLER_NAMESPACE}"
          fi
          if [ "${WAIT}" == "true" ]; then
            set -- "$@" --wait
          fi

          VERSION_2_MATCH="$(helm version --short -c | grep 'Client: v2' || true)"
          if [ -n "${VERSION_2_MATCH}" ]; then
            if [ -n "${RELEASE_NAME}" ]; then
              set -- "$@" --name "${RELEASE_NAME}"
            fi
            helm install helm/charts/determined "$@"
          else
            if [ -n "${RELEASE_NAME}" ]; then
              helm install "${RELEASE_NAME}" helm/charts/determined "$@"
            else
              set -- "$@" --generate-name
              helm install helm/charts/determined "$@"
            fi
          fi
        name: Install chart
        no_output_timeout: 30m
    - run:
        name: Set Master Address
        command: |
          MASTER_HOST=$(kubectl get -n default  service determined-master-service-ci \
          --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "export MASTER_HOST=\"${MASTER_HOST}\"" >> $BASH_ENV
          echo "${MASTER_HOST}"
    - run:
        name: Set Google Application Credentials
        command: |
          GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
          echo "export GOOGLE_APPLICATION_CREDENTIALS=\"${GOOGLE_APPLICATION_CREDENTIALS}\"" >> $BASH_ENV
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://${MASTER_HOST}:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m e2e_gpu \
          --durations=0 \
          --master-host="${MASTER_HOST}" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - run:
        name: Terminate GKE Cluster
        when: always
        command: |
          gcloud container clusters delete ${CLUSTER_ID} --quiet --region=us-west1
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< "master"

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "xmaster" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "${SLACK_USER_ID}" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "${SLACK_USER_ID}"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`e2e_gpu\` E2E GKE GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`e2e_gpu\` E2E GKE GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
  test-e2e-tf2:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    parallelism: 1
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: pyenv global 3.6.10
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo ubuntu-1604:202004-01 > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n e2e_tests/tests/requirements.txt ]; then
            cat e2e_tests/tests/requirements.txt >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-cli
        working_directory: ~/project/cli
        command: |
          make build
          pip install --find-links dist determined-cli==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-cli==0.13.5.dev0
    - run:
        name: Install determined
        working_directory: ~/project/harness
        command: |
          make build
          pip install --find-links dist determined==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: Install e2e_tests/tests/requirements.txt
        command: |
          if [ -n "e2e_tests/tests/requirements.txt" ]; then
            pip install -r e2e_tests/tests/requirements.txt
          fi
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        name: Start database
        command: make -C tools start-db
    - run:
        name: Start cluster
        command: make -C tools run
        background: true
    - run:
        command: docker pull determinedai/environments:py-3.6.9-pytorch-1.4-tf-2.2-cpu-699677b
    - run:
        name: Split tests
        working_directory: ~/project/e2e_tests
        command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run
    - run:
        command: python .circleci/scripts/wait_for_master.py http://localhost:8080
    - run:
        name: Run e2e tests
        working_directory: ~/project/e2e_tests
        command: |
          pytest -vv -s \
          -m tensorflow2_cpu \
          --durations=0 \
          --master-host="localhost" \
          --master-port="8080" \
          --junit-xml="/tmp/test-results/e2e/tests.xml" \
          $(cat /tmp/tests-to-run)
    - store_test_results:
        path: /tmp/test-results/
  deploy-release-party:
    docker:
    - image: determinedai/cimg-base:stable
    steps:
    - checkout
    - run:
        name: Set Slack variables
        command: |
          if ! [ -x "$(command -v jq)" ]; then
            apt update && apt install -y jq
          fi

          AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
          echo "export AUTHOR_EMAIL=\"${AUTHOR_EMAIL}\"" >> $BASH_ENV
          LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
          SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
          if [[ "$SUCCESS" == "true" ]]; then
            SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
            SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
            echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
            echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
          else
            echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
          fi
    - run:
        name: Setup venv
        command: |
          python3.6 -m venv /tmp/venv
          echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
          /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools
    - run:
        name: Write cache key
        command: |
          echo determinedai/cimg-base:stable > /tmp/cachefile
          if [ "true" = "true" ]; then
            cat common/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat harness/setup.py >> /tmp/cachefile
          fi
          if [ "false" = "true" ]; then
            cat cli/setup.py >> /tmp/cachefile
          fi
          if [ "true" = "true" ]; then
            cat deploy/setup.py >> /tmp/cachefile
          fi
          echo  >> /tmp/cachefile
          if [ -n  ]; then
            cat  >> /tmp/cachefile
          fi
    - restore_cache:
        keys:
        - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
    - run:
        name: Install determined-common
        working_directory: ~/project/common
        command: |
          make build
          pip install --find-links dist determined-common==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-common==0.13.5.dev0
    - run:
        name: Install determined-deploy
        working_directory: ~/project/deploy
        command: |
          make build
          pip install --find-links dist determined-deploy==0.13.5.dev0
          pip install --no-deps --force-reinstall --find-links dist determined-deploy==0.13.5.dev0
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install \nfi\n"
    - run:
        name: 'Install '
        command: "if [ -n \"\" ]; then\n  pip install -r \nfi\n"
    - save_cache:
        key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
        paths:
        - /tmp/venv
    - run:
        name: Deploy AWS cluster
        command: |
          det-deploy aws up \
            --cluster-id determined-${CIRCLE_BRANCH} \
            --det-version ${CIRCLE_SHA1} \
            --agent-instance-type p2.8xlarge \
            --max-dynamic-agents 8 \
            --keypair integrations-test
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ ! -x /bin/bash ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< ""

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "x" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "${SLACK_WEBHOOK}" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "${SLACK_USER_ID}" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< "${SLACK_USER_ID}"
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: A $CIRCLE_JOB job has succeeded!\", \
                                  \"text\": \":tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS\", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " ${SLACK_WEBHOOK}
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":thisisfine: A \`${CIRCLE_JOB}\` job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`\", \
                        \"text\": \":thisisfine: A \`${CIRCLE_JOB}\` job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\` $SLACK_MENTIONS\", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " ${SLACK_WEBHOOK}
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
workflows:
  lint:
    jobs:
    - build-proto
    - build-and-package-ts-sdk:
        requires:
        - build-proto
    - lint-python
    - lint-go
    - lint-react:
        requires:
        - build-and-package-ts-sdk
  test-cli:
    jobs:
    - test-cli-python-35
    - test-cli-python-36
    - test-cli-python-37
    - test-cli-python-38
    - test-cli-win/default
  test-unit:
    jobs:
    - test-unit-go
    - build-proto
    - build-and-package-ts-sdk:
        requires:
        - build-proto
    - test-unit-react:
        requires:
        - build-and-package-ts-sdk
    - test-unit-harness
    - test-unit-harness-tf2
    - test-examples
  test-e2e:
    jobs:
    - build-proto
    - build-and-package-ts-sdk:
        requires:
        - build-proto
    - build-react:
        requires:
        - build-and-package-ts-sdk
    - build-storybook:
        requires:
        - build-and-package-ts-sdk
    - build-docs
    - build-go
    - package-and-push-system-local:
        requires:
        - build-react
        - build-docs
    - package-and-push-system-dev:
        filters:
          branches:
            ignore:
            - /pull\/.*/
        requires:
        - build-react
        - build-docs
    - test-debian-packaging:
        requires:
        - package-and-push-system-local
    - test-e2e-tf2:
        requires:
        - build-go
    - test-e2e-tf1:
        requires:
        - build-go
    - test-e2e-cpu:
        requires:
        - build-go
    - test-e2e-webui:
        requires:
        - build-and-package-ts-sdk
        - package-and-push-system-local
    - deploy-1:
        filters:
          branches:
            only:
            - master
        requires:
        - package-and-push-system-dev
        context: aws
    - deploy-release-party:
        filters:
          branches:
            only:
            - /release-.*/
        requires:
        - package-and-push-system-dev
        context: aws
    - test-e2e-gpu-parallel-1:
        filters:
          branches:
            only: master
        requires:
        - package-and-push-system-dev
        context: aws
    - test-e2e-gpu-single-1:
        filters:
          branches:
            only: master
        requires:
        - package-and-push-system-dev
        context: aws
    - request-dev-deploy:
        filters:
          branches:
            ignore:
            - /pull\/.*/
            - /release-.*/
            - master
        type: approval
    - deploy-2:
        filters:
          branches:
            ignore:
            - /pull\/.*/
            - /release-.*/
            - master
        requires:
        - request-dev-deploy
        - package-and-push-system-dev
        context: aws
    - request-gpu-tests:
        filters:
          branches:
            ignore:
            - /pull\/.*/
            - /release-.*/
            - master
        type: approval
    - test-e2e-gpu-parallel-2:
        filters:
          branches:
            ignore:
            - /pull\/.*/
            - /release-.*/
            - master
        requires:
        - request-gpu-tests
        - package-and-push-system-dev
        context: aws
    - test-e2e-gpu-single-2:
        filters:
          branches:
            ignore:
            - /pull\/.*/
            - /release-.*/
            - master
        requires:
        - request-gpu-tests
        - package-and-push-system-dev
        context: aws
    - test-e2e-gke-single-gpu-1:
        filters:
          branches:
            only: master
        requires:
        - package-and-push-system-dev
        context: gcp
    - test-e2e-gke-parallel-1:
        filters:
          branches:
            only: master
        requires:
        - package-and-push-system-dev
        context: gcp
    - request-k8-tests:
        filters:
          branches:
            ignore:
            - /pull\/.*/
            - /release-.*/
            - master
        type: approval
    - test-e2e-gke-single-gpu-2:
        filters:
          branches:
            ignore:
            - /pull\/.*/
            - /release-.*/
            - master
        requires:
        - request-k8-tests
        - package-and-push-system-dev
        context: gcp
    - test-e2e-gke-parallel-2:
        filters:
          branches:
            ignore:
            - /pull\/.*/
            - /release-.*/
            - master
        requires:
        - request-k8-tests
        - package-and-push-system-dev
        context: gcp
    - test-det-deploy-local:
        requires:
        - package-and-push-system-local
  nightly:
    triggers:
    - schedule:
        cron: 0 5 * * *
        filters:
          branches:
            only:
            - master
    jobs:
    - test-e2e-gpu-nightly:
        context: aws
    - test-e2e-gpu-distributed:
        context: aws
  release:
    jobs:
    - build-proto:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /(\d)+(\.(\d)+)+/
            - /((\d)+(\.(\d)+)+)(rc)(\d)+/
    - build-and-package-ts-sdk:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /(\d)+(\.(\d)+)+/
            - /((\d)+(\.(\d)+)+)(rc)(\d)+/
        requires:
        - build-proto
    - build-react:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /(\d)+(\.(\d)+)+/
            - /((\d)+(\.(\d)+)+)(rc)(\d)+/
        requires:
        - build-and-package-ts-sdk
        context: determined-production
    - build-docs:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /(\d)+(\.(\d)+)+/
            - /((\d)+(\.(\d)+)+)(rc)(\d)+/
        context: determined-production
    - publish-python-package-common:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /(\d)+(\.(\d)+)+/
            - /((\d)+(\.(\d)+)+)(rc)(\d)+/
        context: determined-production
    - publish-python-package-harness:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /(\d)+(\.(\d)+)+/
            - /((\d)+(\.(\d)+)+)(rc)(\d)+/
        context: determined-production
    - publish-python-package-cli:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /(\d)+(\.(\d)+)+/
            - /((\d)+(\.(\d)+)+)(rc)(\d)+/
        context: determined-production
    - publish-python-package-deploy:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /(\d)+(\.(\d)+)+/
            - /((\d)+(\.(\d)+)+)(rc)(\d)+/
        context: determined-production
    - package-and-push-system-rc:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /((\d)+(\.(\d)+)+)(rc)(\d)+/
        requires:
        - build-react
        - build-docs
        context: determined-production
    - package-and-push-system-release:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /(\d)+(\.(\d)+)+/
        requires:
        - build-react
        - build-docs
        context: determined-production
    - publish-docs:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /(\d)+(\.(\d)+)+/
        requires:
        - build-docs
        context: determined-production
    - upload-try-now-template:
        filters:
          branches:
            ignore:
            - /.*/
          tags:
            only:
            - /(\d)+(\.(\d)+)+/
        context: determined-production
  version: 2
